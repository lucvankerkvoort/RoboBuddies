{"version":3,"sources":["reducers.js","components/Card.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","className","map","user","i","id","name","email","key","src","alt","width","Search","search","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","state","hasError","componentDidCatch","info","setState","this","React","Component","App","componentDidMount","onRequestRobots","onSearchChange","filterRobot","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ea886f90.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAIL,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Card = ({ robots }) => {\r\n  return (\r\n    <div className=\"card-section\">\r\n      {robots.map((user, i) => {\r\n        const { id, name, email } = user;\r\n        return (\r\n          <div id={id} className=\"card\" key={i}>\r\n            <img\r\n              src={`https://robohash.org/${id}`}\r\n              alt=\"robots\"\r\n              width=\"200px\"\r\n              key={i}\r\n            />\r\n            <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst Search = ({ search }) => {\r\n  return (\r\n    <div>\r\n      <input type=\"search\" placeholder=\"search robots\" onChange={search} />\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: \"scroll\", height: \"700px\" }}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ hasError: true });\r\n  };\r\n  render() {\r\n    const { hasError } = this.state;\r\n    return hasError ? (\r\n      <h1>Oops... Something went wrong</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Card from \"./components/Card\";\nimport Search from \"./components/Search\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"./actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends React.Component {\n  componentDidMount = () => {\n    this.props.onRequestRobots();\n  };\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobot = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"App\">\n        <h1>RoboFriends</h1>\n        <Search search={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <Card robots={filterRobot} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"http://jsonplaceholder.typicode.com/users\")\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"UPDATE_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"UPDATE_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAIL = \"UPDATE_ROBOTS_FAIL\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst logger = createLogger();\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}